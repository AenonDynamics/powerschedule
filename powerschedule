#!/bin/bash

# ----------------------------------------------------------------------
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# --
# Copyright 2019-2020 Andi Dittrich <https://aenon-dynamics.com>
# ----------------------------------------------------------------------

# powerschedule https://github.com/AenonDynamics/powerschedule
VERSION="0.2.0"

show_usage(){
    cat << EOF
Usage: powerschedule [boot|shutdown]
     --help                  Displays this help
     --version               Displays version
EOF
    exit 0
}

show_version(){
    cat << EOF
powerschedule
 - Version: ${VERSION}
 - License: MPL-2.0 http://mozilla.org/MPL/2.0/
 - Repository: https://github.com/AenonDynamics/powerschedule
EOF
    exit 0
}

# simple processing
[ "$1" = "--help" ] && show_usage
[ "$1" = "--version" ] && show_version
[ -z "$1" ] && show_usage

# config file location
CONF_FILENAME="/etc/powerschedule.conf"

# config available ?
[ ! -f "$CONF_FILENAME" ] && { echo >&2 "configuration file <${CONF_FILENAME}> not found"; exit 1; }

# load config
source $CONF_FILENAME

# use systemd transisent timer to schedule system shutdown
setPoweroffSchedule(){
    # normalize time
    NOW=$(date +%s)
    TS=$(date +%s -d "today $1")
    
    # TS in the past ? happens in case of daily schedules -> set schedule for tomorrow
    if [ "$NOW" -gt "$TS" ]; then
        TS=$(date +%s -d "tomorrow $1")
    fi

    # print next schedule
    SCHEDULE=$(date -d "@$TS" --utc +"%F %T UTC")
    echo "setting power-off schedule to $SCHEDULE"

    # add transisent timer
    systemd-run --on-calendar="$SCHEDULE" systemctl poweroff || {
        echo "error: cannot enable systemd timer triggered power-off"
    }
}

# use rtcwake to wakeup
setWakeupSchedule(){
    # normalize time
    NOW=$(date +%s)
    TS=$(date +%s -d "today $1")
    
    # TS in the past ? happens in case of daily schedules -> set schedule for tomorrow
    if [ "$NOW" -gt "$TS" ]; then
        TS=$(date +%s -d "tomorrow $1")
    fi

    # print next schedule
    SCHEDULE=$(date -d "@$TS" --utc +"%F %T UTC")
    echo "setting power-on schedule to $SCHEDULE"

    # set rtcwake; wakeup only; absolute time
    rtcwake --mode=no --time=$TS || {
        echo "error: cannot set rtcwake power-on"
    }
}

# system boot ?
if [ "$1" = "boot" ]; then

    # poweron set ?
    [ ! -z "$DAILY_POWERON" ] && {
        setWakeupSchedule "$DAILY_POWERON";
    } || {
        echo "no power-on schedule set in <${CONF_FILENAME}>"
    }

    # poweroff set ?
    [ ! -z "$DAILY_POWEROFF" ] && {
        setPoweroffSchedule "$DAILY_POWEROFF";
    } || {
        echo "no power-off schedule set in <${CONF_FILENAME}>"
    }

# system shutdown ?
elif [ "$1" = "shutdown" ]; then

    # poweron set ?
    [ ! -z "$DAILY_POWERON" ] && {
        setWakeupSchedule "$DAILY_POWERON";
    } || {
        echo "no power-on schedule set in <${CONF_FILENAME}>"
    }
fi

# success
exit 0